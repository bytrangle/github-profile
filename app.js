require('dotenv').config(); // This is for loading environment variables from the development enviroment only
const http = require('http');
const express = require('express');
const path = require('path');

const PORT = process.env.PORT || 5000;

// express()
//   .use(express.static(path.join(__dirname, 'public/assets')))
//   .set('views', path.join(__dirname, 'views'))
//   .set('view engine', 'ejs')
//   .get('/', (req, res) => res.end('This page does not exist'))
//   .listen(PORT, () => console.log(`Listening on ${PORT}`));

const fs = require('fs');
// const path = require('path');
// const url = require('url');
const ejs = require('ejs');
const fetch = require('node-fetch');
const { profileQuery, reposQuery } = require('./utils/graphql');
const { post } = require('./utils/apiService');

let githubProfileData;
const apiEndpoint = 'https://api.github.com/graphql';
const { log, error } = console;
log(profileQuery);

const templatePath = `${__dirname}/views/index.ejs`;
const html = fs.readFileSync(templatePath, 'utf-8');

const token = process.env.GITHUB_TOKEN;

const staticFileHandler = (req, res, filePath, contentType) => {
  fs.readFile(filePath, (err, content) => {
    if (err) {
      log(err);
      // if (error.code === 'ENOENT') {
      //   fs.readFile('./404.html', function (error, content) {
      //     res.writeHead(404, { 'Content-Type': 'text/html' });
      //     res.end(content, 'utf-8');
      //   });
      // } else {
      res.writeHead(500);
      res.end(`Sorry, check with the site admin for error: ${err.code}`);
      // }
    } else {
      res.writeHead(200, { 'Content-Type': contentType }); // indicate the request was successful
      res.end(content, 'utf-8'); // send the client the index file generated by EJS templating engine
    }
  });
};

const checkResponseStatus = (res) => {
  if (!res.ok) throw new Error(`Request to Github API failed: ${res.status}-${res.statusText}`);
  return res;
};

// The pattern used to match url like /assets/[filename].[extension], for example /assets/main.css
const test = `
query myRepos($repos_count:Int!) {
  viewer {
    repositories(first: $repos_count) {
      totalCount
    }
  }
}
`;
const assetPattern = /^\/assets\/[a-zA-Z]+\.[a-zA-Z]+/;
const requestListener = (req, response) => {
  const { url } = req;
  if (url === '/') {
    response.end(ejs.render(html, { ...githubProfileData, filename: templatePath }));
  } else if (url === '/api') {
    log(reposQuery);
    post(apiEndpoint, { query: reposQuery, variables: { repos_count: 20 } }, token)
      // fetch(apiEndpoint, {
      //   method: 'POST',
      //   body: JSON.stringify({ query: reposQuery, variables: { repos_count: 20 } }),
      //   headers: {
      //     Authorization: `bearer ${token}`,
      //   },
      // })
      .then((res) => res.json())
      .then((json) => {
        const repos = json.data.viewer.repositories.nodes;
        log(repos);
        log(repos.constructor === Array);
        response.writeHead(200, { 'Content-Type': 'application/json' });
        response.write(JSON.stringify({ data: repos }));
        response.end();
      });
  }
  // else if (url === '/api') {
  //   log(reposQuery);
  //   fetch(apiEndpoint, {
  //     method: 'POST',
  //     body: JSON.stringify({ query: test, variables: { repos_count: 20 } }),
  //     headers: {
  //       Authorization: `bearer ${token}`,
  //     },
  //   })
  //     .then(checkResponseStatus)
  //     .then((res) => res.json())
  //     .then((json) => {
  //       log(json);
  //       response.end('Fuck you');
  //     })
  //     // .then((json) => {
  //     //   log(json);
  //     //   const repos = json.data.viewer;
  //     //   response.end({ data: repos });
  //     // })
  //     .catch((err) => error(err));
  // }
  else if (url.match(assetPattern)) {
    // Added the public pattern because these static files are actually located inside /public/assets, although they are publicly served under [domain]/assets/
    const filePath = `./public${req.url}`;
    const extname = String(path.extname(filePath)).toLowerCase();
    const mimeTypes = {
      '.html': 'text/html',
      '.js': 'text/javascript',
      '.css': 'text/css',
      '.json': 'application/json',
      '.png': 'image/png',
      '.jpg': 'image/jpg',
      '.gif': 'image/gif',
      '.svg': 'image/svg+xml',
      '.wav': 'audio/wav',
      '.mp4': 'video/mp4',
      '.woff': 'application/font-woff',
      '.ttf': 'application/font-ttf',
      '.eot': 'application/vnd.ms-fontobject',
      '.otf': 'application/font-otf',
      '.wasm': 'application/wasm',
    };
    const contentType = mimeTypes[extname] || 'application/octet-stream';
    log(`file path is ${filePath}`);
    staticFileHandler(req, response, filePath, contentType);
  } else {
    response.end("This page doesn't exist");
  }
};

// fetch(apiEndpoint, {
//   method: 'POST',
//   body: JSON.stringify({ query: profileQuery }),
//   headers: {
//     Authorization: `bearer ${token}`,
//   },
// })
// .then(checkResponseStatus)
post(apiEndpoint, { query: profileQuery }, token)
  .then((res) => res.json())
  .then((json) => {
    githubProfileData = json.data.viewer;
    log(json);
    const server = http.createServer(requestListener);
    server.listen(PORT, () => {
      log(`Server is running on ${PORT}`);
    });
  })
  .catch((err) => error(err));
